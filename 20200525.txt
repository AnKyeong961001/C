2020.05.20

라이브러리를 사용할 시 
 - 라이브러리에 선언된 변수를 사용 할 시 선언된 변수의 identity는 맞춰준다 
-----------------------------------------------------------------
ex) arrlib.c
int *arr; 일 경우

main.c 에서는
int arr[] -(x)
int *arr - (o)  <<- 이렇게 선언해야 한다.
=================================================================
=================================================================

배열에서 크기(방의 수) 를 나타내는 인자는 유효한 범위 안에 있음을 보장하는 것이 좋다.
ex) arr[len]; 일 경우
len 아리는 변수는 int type 보다 size_t,unsigned long, unsigned int ... 가 좋다.
=================================================================
=================================================================

strcpy, fgets, ... 는 범위를 넘는 문자의 경우 잘라서 저장한다.
 ->> 데이터손실 및 소프트웨어의 취약성.
따라서 데이터 손실 또는 NULL 문자로 종료되지 않는 것에 대한대비를 해야한다.
-----------------------------------------------------------------
const char* src = "hello world"; // 원본
char dst[5]; // 새 변수
->> strcpy(dst,src) 를 연산할 경우 dst < src 이므로 BufferOverflow

따라서 
if(src == NULL){ // NULL인지 검사 
	//...
}
else if(strlen(src) >= sizeof(dst)){
	//... ->> 원본과 새로운 변수 크기 조사
	//새 변수가 더 크거나 같아야 한다. 
	// 만약 이 if문에 들어올 경우 에러를 띄워준다 or 정책에 맞게 한다.
}
** fgets 와 같이 일정 길이의 문자열을 읽어들이는 함수의경우
1. buffer보다 작은 값 - 모든 값 저장 후 개행과 '\0' 을 끝에 추가한다.
2. buffer보다 큰 값 - 모든 값 저장 후 가장 끝 값 대신'\0' 저장 - data 손실
		-->> '\n' 을 포함한 길이를 판단한다.
=================================================================
=================================================================

문자열 포인터와 문자열 배열의 차이.
char *s1 = "hello world";
char s2[] = "hello world";

s1[0] = ' '; // 런타임 에러
s2[0] = ' '; // 지워진다.

문자열 포인터는 ReadOnly 영역의 문자열을 가리키며, 
문자열 배열은 ReadOnly 영역의 문자열을 받아와서 배열에 저장한다.(stack)
따라서 문자열 배열에 있는 문자들은 수정할 수 있다.

따라서 문자열 포인터에 대해서는 const 키워드를 붙인다.
=================================================================
=================================================================

문자열 파싱
문자열 파싱 시 strtok 함수를 사용한다.
strtok(파싱할문자열,delimiter)-> 구분자를 기준으로 문자열을 자른다.
-----------------------------------------------------------------
char str[] = "hello wrold i am jeonka haha";
char copy[32];
strcpy(copy,str); -- str의 문자열을 copy에 복사 // strtok을 할 시 원본 데이터가 손상이 될 수 있음.

char *token = strtok(copy,' '); >> 구분자를 기준으로 자른 문자 토큰을
 					token 변수에 저장한다
while(token != NULL){
	printf("%d",token);
	token = strtok(NULL,' '); >> 구분자를 기준으로 기존에 있던 문자열을
}					토큰화 한다.(NULL 을 전달시 기
					존에 있던 문자열을 부른다.)

=================================================================
=================================================================

char [] 에 문자를 저장해 문자열을 만들 시 마지막 문자에 '\0' 을 넣어줘야 한다.
"" 연산자는 문자열 마지막에 '\0' 을 넣어주는 역할을 한다.
-----------------------------------------------------------------

char arr[32];
for(int i = 0 ; i < sizeof(arr);i++){
	arr[i] = 'A' + i; // arr 에 A - Z 까지 저장한다.
}
이 경우 32번째에는 \0 이 들어가지 않는다.
printf("%s ",arr); >> 오류
따라서 sizeof(arr)-1 에 '\0'을 넣어야 한다.
만약 char arr[] ="A-Z" 일 경우 "" 연산자는 문자열의 끝에 '\0' 을 넣어주는 역할을 하므로 이 경우는 따로 넣어줄 필요가 없다.
=================================================================
=================================================================

동적 할당받을 시 주의사항 
1. 같은 모듈 내에서 해제한다.
2. 같은 함수 내 같은 레이어에서 해제한다.
3. 할당 받은 포인터 변수를 해제 후 반드시 NULL로 초기화 해준다.
4. 동적할당 메모리와 변수 크기가 다를 시 미정의 동작이다
 - Student *p = (Student*)malloc(sizeof(Person)); 
 - 형변환도 다른 타입으로 하는것은 좋지 않다.
#define MALLOC(T) ( (T*)malloc(sizeof(T)) )
=================================================================
=================================================================

스택에 대하여 큰 메모리를 사용하면 안된다.
1. 가변길이 배열
2. 재귀 호출
=================================================================
=================================================================

구조체 내 변수선언
1. 동적할당의 수는 최소한으로
2. 메모리 낭비를 최소로 한다.
--> char배열(문자열) 선언시 flexible array를 통해 선언한다.
flexible의 경우 반드시 구조체의 마지막 멤버로 위치해야 합니다.
-----------------------------------------------------------------
typedef struct{
	int age;
	char name[]; >> flexible array --> 구조체의 마지막 멤버로 위치하며 배열 방 개수 선언을 하지 않는다
}Person;

동적 할당시 
Person *p = (Person*)malloc( (sizeof(Person)) + (strlen(name) + 1) ) --> 구조체 크기 + 받은 캐릭터배열(이름) 의 크기.
=================================================================
=================================================================

realloc 사용시 주의사항
realloc(포인터 변수, 길이); 
--> 포인터 변수가 가리키는 동적 메모리를 해제 후 다시 할당받으므로 기존 데이터가 날아간다.
const char *name = "susan"; 일 경우 이 변수는 동적할당이 아닌 stack 에 정적할당한 변수이므로 해제할 시 에러가난다.

=================================================================
=================================================================

파일 관련 함수
 - 파일 열기 : Linux : open / Windows : CreateFile
 - rename()의 동작 
   Linux : 이미 존재하는 파일을 삭제 후 생성
	-- access() 함수를 사용한다.
   Windows : rename 함수 호출 실패
Linux : \n
Windows : \r\n
MacOS : \r
=================================================================
=================================================================

문자 입출력 함수 반환 값을 받을 시 int 값으로 받아야 한다.
.hex 로 파일을 읽을 시 FF로 인코딩 되어있는 라인을 볼 수 있는데 이 때 char 와 int 의 읽는 방삭이 다르다.

unsigned char : 1111 1111 -> 255 --> 더 큰값은 데이터 손실
unsigned int : 0000 0000 0000 0000 0000 0000 1111 1111 -> 255
signed char : 1111 1111 -> -1
signed int : 1111 1111 1111 1111 1111 1111 1111 1111 -> -1

FF 의 경우 -1 즉 EOF 와 구분이 안되기 때무에 unsigned int 타입으롭다아야 한다
